#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define M 16 
#include "FUNC.h"

int main(char ravno){
   
   int line_A, stolb_A, line_B, stolb_B;

    printf("Kakoi razmer vi hotite? \n");
    


    printf("Kolichestvo strok matrici A: ");
    scanf("%d", &line_A);
    printf("Kolichestvo stolbcov matrici A: ");
    scanf("%d", &stolb_A);
   
   double **matrix_A, **matrix_B, **matrix_C;

    matrix_A = (double **)malloc(line_A * sizeof(double *));            
    for(int i=0; i<line_A; i++){
        matrix_A[i] = (double *)malloc(stolb_A * sizeof(double));
    }
    for(int l=0; l<line_A; l++){
        printf("Vvedite znachenie %d stroci matrici A: ", l+1);           
        for(int c=0; c<stolb_A; c++){
            scanf("%lf", &matrix_A[l][c]);
    }
}
    printf("Kolichestvo strok matrici B: ");
    scanf("%d", &line_B);
    printf("Kolichestvo stolbcov matrici B: ");
    scanf("%d", &stolb_B);
    
    matrix_B = (double **)malloc(line_B * sizeof(double *));            

    for(int i=0; i<line_B; i++){
        matrix_B[i] = (double *)malloc(stolb_B * sizeof(double));
    }
    for(int l=0; l<line_B; l++){
        printf("Vvedite znachenie %d stroci matrici B: ", l+1);           
        for(int c=0; c<stolb_B; c++){
            scanf("%lf", &matrix_B[l][c]);
	    }	
    }
    matrix_C = (double **)malloc(line_A * sizeof(double *));
    for(int i=0; i<line_A; i++){
    matrix_C[i] = (double *)malloc(stolb_A * sizeof(double));
    	}    
    
    
    double **result (int line_A, int stolb_A, int line_B, int stolb_B, double **matrix_A, double **matrix_B, double **matrix_C);
    printf("vvesti znacenie +,-,*  \n ");
    scanf("%s", &ravno);
    if(ravno == '+'){
        **result == **slogenie;
            for(int l=0; l<line_A; l++){
                for(int c=0; c<stolb_B; c++){
			        printf("%.2f ", matrix_C[l][c]);
        }
        printf("\n");
            
        }
		}
    if(ravno == '-'){
        **result == minus;
        
    }
    if(ravno == '*'){   
        **result == umnogenie;
    }   
    
    
    for(int i=0; i < line_A; i++){
        free(matrix_A[i]);
    }
    free(matrix_A);
    
    for(int i=0; i < line_B; i++){
        free(matrix_B[i]);
    }
    free(matrix_B);
    

    for(int i=0; i < line_A; i++){
        free(matrix_C[i]);
    }
    free(matrix_C);
    
	return 0;
}
