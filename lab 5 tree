#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// Структура узла двоичного дерева для слов
struct tnode
{
    char *word;
    int count;
    struct tnode *left, *right;
};

// Функция для поиска узла с заданным словом
struct tnode *tree_find(struct tnode *p, const char *word);

// Функция для вставки слова в дерево
struct tnode *tree_insert(struct tnode *p, const char *word);

// Функция для печати слов в дереве в алфавитном порядке
void tree_print(struct tnode *p);

// Функция для освобождения памяти, выделенной под дерево
void tree_free(struct tnode *p);

int main()
{
    struct tnode *root = NULL;
    int n;
    char word[256];

    printf("Enter the number of words\n");
    scanf("%d", &n);

    while (n-- > 0)
    {
        printf("Enter the word\n");
        scanf("%s", word);

        root = tree_insert(root, strdup(word));
    }

    tree_print(root);
    putchar('\n');
    fflush(stdout);

    tree_free(root);

    return 0;
}

// Функция для поиска узла с заданным словом
struct tnode *tree_find(struct tnode *p, const char *word)
{
    int cmp;

    if (p == NULL)
        return NULL;

    cmp = strcmp(word, p->word);
    if (cmp < 0)
        return tree_find(p->left, word);
    else if (cmp > 0)
        return tree_find(p->right, word);
    else
        return p;
}

// Функция для вставки слова в дерево
struct tnode *tree_insert(struct tnode *p, const char *word)
{
    int cmp;

    if (p == NULL)
    {
        p = (struct tnode *)malloc(sizeof(struct tnode));
        if (p == NULL)
        {
            printf("Cannot allocate\n");
            exit(0);
        }

        p->word = strdup(word);
        p->count = 1;
        p->left = p->right = NULL;

        return p;
    }

    cmp = strcmp(word, p->word);
    if (cmp < 0)
    {
        p->left = tree_insert(p->left, word);
        return p;
    }
    else if (cmp > 0)
    {
        p->right = tree_insert(p->right, word);
        return p;
    }
    else
    {
        p->count++;
        return p;
    }
}

// Функция для печати слов в дереве в алфавитном порядке
void tree_print(struct tnode *p)
{
    if (p != NULL)
    {
        tree_print(p->left);
        printf("%s %d\n", p->word, p->count);
        tree_print(p->right);
    }
}

// Функция для освобождения памяти, выделенной под дерево
void tree_free(struct tnode *p)
{
    if (p != NULL)
    {
        tree_free(p->left);
        tree_free(p->right);
        free(p->word);
        free(p);
    }
}
