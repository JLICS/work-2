#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Это пример сортировки целых чисел при помощи двоичного дерева

struct tnode
{
   int data;
   int count;
   struct tnode *lchild, *rchild;
};

struct tnode *tree_find(struct tnode *p, int val);
struct tnode *tree_find(struct tnode *p, int val);
int tree_height(struct tnode *p);
int tree_nodes(struct tnode *p);
int tree_counts(struct tnode *p);

TREE *tree_insert(TREE *p, char *val) {
    if (p == NULL) {
        p = (TREE *) malloc(sizeof(TREE));
        if (p == NULL) {
            printf("Cannot allocate\n");
            exit(0);
        }
        p->w = strdup(val);
        p->count = 1;
        p->left = p->right = NULL;

        return p;
    }
    int cmp = my_strcmp(val, p->w);
    if (cmp < 0) {
        p->left = tree_insert(p->left, val);
    } else if (cmp > 0) {
        p->right = tree_insert(p->right, val);
    } else {
        p->count++;
    }

    return p;
}
/* a function to binary tree in inorder */

void tree_print_to_file(TREE *p, FILE *file) {
    if (p != NULL) {
        tree_print_to_file(p->left, file);
        fprintf(file, "%s %d\n", p->w, p->count);
        tree_print_to_file(p->right, file);
    }
}

void main()
{
   struct tnode *root = NULL;
   int n,x;
   printf("Enter the number of nodes\n");
   scanf("%d",&n);
   while( n-->0)
     {
         printf("Enter the data value\n");
         scanf("%d",&x);
         root = tree_insert(root,x);
    }
     tree_print(root);
     putchar ('\n');
     fflush(stdout);
}

