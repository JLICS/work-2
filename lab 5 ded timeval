#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef struct tree {
    char *w;   // слово
    int count; // счетчик слов
    struct tree *left;
    struct tree *right;
} TREE;

// Функция сравнения слов, учитывающая особое положение буквы Ё в таблице кодировки Win-1251
int my_strcmp(const char *str1, const char *str2) {
    const unsigned char *s1 = (const unsigned char *)str1;
    const unsigned char *s2 = (const unsigned char *)str2;

    while (tolower(*s1) == tolower(*s2)) {
        if (*s1 == '\0') {
            return 0;
        }
        s1++;
        s2++;
    }

    return tolower(*s1) - tolower(*s2);
}

// Функция вставки узла в дерево
TREE *tree_insert(TREE *p, char *val) {
    if (p == NULL) {
        p = (TREE *) malloc(sizeof(TREE));
        if (p == NULL) {
            printf("Cannot allocate\n");
            exit(0);
        }
        p->w = strdup(val);
        p->count = 1;
        p->left = p->right = NULL;

        return p;
    }

    int cmp = my_strcmp(val, p->w);
    if (cmp < 0) {
        p->left = tree_insert(p->left, val);
    } else if (cmp > 0) {
        p->right = tree_insert(p->right, val);
    } else {
        p->count++;
    }

    return p;
}

// Функция обхода дерева в алфавитном порядке
void tree_inorder(TREE *p) {
    if (p == NULL) {
        return;
    }

    tree_inorder(p->left);
    printf("%s: %d\n", p->w, p->count);
    tree_inorder(p->right);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <file1> [<file2> ...]\n", argv[0]);
        return 1;
    }

    TREE *tree = NULL;

    FILE *fp = fopen("1letter.txt", "r");
    if (fp == NULL) {
        perror("1letter.txt");
        return 1;
    }

    char buf[1024];
    char *w;

    while (fgets(buf, sizeof(buf), fp)) {
        w = strtok(buf, " .,:;-");
        while (w != NULL) {
            for (int j = 0; w[j]; j++) {
                w[j] = tolower(w[j]);
            }
            tree = tree_insert(tree, w);
            w = strtok(NULL, " .,:;-");
        }
    }

    fclose(fp);

    tree_inorder(tree);

    return 0;
}
