#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <sys/time.h>
#include <math.h>
// здесь все что необходимо глобальное
typedef struct tree {
  char *w;   // слово
  int count; // счетчик слов
  struct tree *left;
  struct tree *right; 
} TREE;

int my_strcmp(const char *str1, const char *str2) {
    const unsigned char *s1 = (const unsigned char *)str1;
    const unsigned char *s2 = (const unsigned char *)str2;

    while (tolower(*s1) == tolower(*s2)) {
        if (*s1 == '\0') {
            return 0;
        }
        s1++;
        s2++;
    }

    return tolower(*s1) - tolower(*s2);
}

TREE *tree_insert(TREE *p, char *val) {
if (p == NULL) {
        p = (TREE *) malloc(sizeof(TREE));
        if (p == NULL) {
            printf("Cannot allocate\n");
            exit(0);
        }
        p->w = strdup(val);
        p->count = 1;
        p->left = p->right = NULL;

        return p;
}

    int cmp = my_strcmp(val, p->w);
    if (cmp < 0) {
        p->left = tree_insert(p->left, val);
    } else if (cmp > 0) {
        p->right = tree_insert(p->right, val);
    } else {
        p->count++;
    }
    return p;
}
    
    
void tree_inorder(TREE *p) {
if (p == NULL) {
        return;
    }

    tree_inorder(p->left);
    printf("%s: %d\n", p->w, p->count);
    tree_inorder(p->right);
}  
    
    
int main()
{
    if (argc < 2) {
        printf("Usage: %s <file1> [<file2> ...]\n", argv[0]);
        return 1;
    }

    FILE *fp;
    char buf[1024];
    char *w;
    int n;
    
    TREE *tree = NULL;

    for (int i = 1; i < argc; i++) {
        fp = fopen(argv[i], "r");
        if (fp == NULL) {
            perror(argv[i]);
            continue;
        }
        while (fgets(buf, sizeof(buf), fp)) {
            n = strlen(buf);
            if (buf[n - 1] == '\n') {
                buf[n - 1] = '\0';
            }

            w = strtok(buf, " .,:;-");
            while (w != NULL) {
                tree = tree_insert(tree, w);
                w = strtok(NULL, " .,:;-");
            }
        }
        
    }

    

  struct timeval t;

gettimeofday(&t, NULL);
long long int T1 = t.tv_sec * 1000000 + t.tv_usec;

// код программы

gettimeofday(&t, NULL);
long long int T2 = t.tv_sec * 1000000 + t.tv_usec;
printf("Time: %lld microseconds\n", T2 - T1);


close(fp);
tree_inorder(tree);
 
 return 0;
 
}
 
