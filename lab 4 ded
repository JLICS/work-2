#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int n, m, current;
 int N[100],M[100];
 char **pic[100];

void input(int cur, char *filename)
{
 FILE *F;
 char str[512], Pic[512][512];
 int i, len;
   len=0; m=0;
   F=fopen(filename,"r");
   while (fgets(str,512,F))
   {
     n= strlen(str);
     if (str[n-1]=='\n') n--;
     len = n;
     strncpy(Pic[m], str,n);  
     m++; 
   } 
//  if (pic[cur]) freepic(cur);
  pic[cur]=(char **)malloc(m*sizeof(char *));
  for (i=0; i<m; i++) 
    {
     pic[cur][i]=(char *)malloc(n); 
     strncpy(pic[cur][i],Pic[i],n);
    }
   N[cur]=n;
   M[cur]=m;
  printf("m=%d n=%d\n",m,n);
}

void output(int num)
{
  int n,m,i,j;
  printf(" Picture # %d\n",num);
  
  m=M[num]; n=N[num];
  for (i=0; i<m; i++)
   {
    for (j=0; j<n; j++)
      putchar(pic[num][i][j]);
    putchar('\n');
   }
 }
 void clean(int i) {
	 int j,k;
	 for (j=0; j<M[i]; j++)
		 for (k=0;k<N[i]; k++)
			 pic[i][j][k] = ' ';
}
void inverse(int i)
{
    // для инверсии картинки
    int j, k;
    for (j = 0; j < M[i]; j++)
        for (k = 0; k < N[i]; k++)
            pic[i][j][k] = (pic[i][j][k] == ' ') ? '@' : ' ';
}

void rotate_r(int i)
{
	int j,k;
    // для поворота картинки по часовой стрелке
    char **temp = pic[i];
    pic[i] = (char **)malloc(N[i] * sizeof(char *));
    for (j = 0; j < N[i]; j++)
    {
        pic[i][j] = (char *)malloc(M[i]);
        for (k = 0; k < M[i]; k++)
            pic[i][j][k] = temp[M[i] - 1 - k][j];
    }
    int t = N[i];
    N[i] = M[i];
    M[i] = t;
}

void rotate_l(int i)
{
    // для поворота против часовой стрелки
    int j,k;
	char **temp = pic[i];
    pic[i] = (char **)malloc(N[i] * sizeof(char *));
    for (j = 0; j < N[i]; j++)
    {
        pic[i][j] = (char *)malloc(M[i]);
        for (k = 0; k < M[i]; k++)
            pic[i][j][k] = temp[k][M[i] - 1 - j];
    }
    int t = N[i];
    N[i] = M[i];
    M[i] = t;
}

void frame(int i, char c)
{
	int j,k;
    // для создания рамки из символов с
    for (j = 0; j < M[i]; j++)
    {
        pic[i][j][0] = c;
        pic[i][j][N[i] - 1] = c;
    }
    for (j = 0; j < N[i]; j++)
    {
        pic[i][0][j] = c;
        pic[i][M[i] - 1][j] = c;
    }
}

void dotting(int i)
{
    int j,k;
	// для заполнения пробелов в картинке точками
    for (j = 0; j < M[i]; j++)
        for (k = 0; k < N[i]; k++)
            if (pic[i][j][k] == ' ')
                pic[i][j][k] = '@';
}

void save(int i, char *filename)
{
   int j,k;
    // для сохранения «картинки» с номером i в файл с именем filename
    FILE *FO = fopen(filename, "w");
    for (j = 0; j < M[i]; j++)
    {
        for (k = 0; k < N[i]; k++)
            fprintf(FO, "%c", pic[i][j][k]);
        fprintf(FO, "\n");
    }
    fclose(FO);
}

int main(int argc, char *argv[]){
  FILE *F, *FO;
  int i;
  char filename[256]="pic1.txt";
  char str[512], *f;
   for(i=0; i<100; i++) pic[i]=NULL;
   F=fopen(filename,"r");
   input(0,filename);
   output(0);
   input(1,"pic2.txt");
   output(1);
   output(0);
   input(2,"picB.txt");
   output(2);
   clean(2);// СЌС‚Рѕ РґР»СЏ РІС‹РІРѕРґР° РєР°СЂС‚РёРЅРєРё РјС‹ Р·Р°РґР°С‘Рј Р·РЅР°С‡РµРЅРёРµ (2) Рё СЃС‚Р°РІРёРј РЅР°Р·РІР°РЅРёРµ (void(clean)-СЌС‚Рѕ РїСЂРёРјРµСЂ)
   output(2);
   inverse(0);
   output(0);
   rotate_r(0);
   output(0);
   rotate_l(0);
   output(0);
   frame(0,'*');
   output(0);
   dotting(0);
   output(0);
   save(0, "picSaved.txt");
   
  fclose(F);
   return 0;
}
 
