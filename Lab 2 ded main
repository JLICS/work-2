// ÐÐ°Ð¹Ñ‚Ð¸ Ð²ÑÐµ Ð¾Ð±Ð»Ð°ÑÑ‚Ð¸, ÑÑ‚Ð°Ñ‚Ð¸ÑÑ‚Ð¸ÐºÑƒ Ð³Ð»Ð¸Ñ„Ð¾Ð²:
// ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ñ‡ÐµÑ€Ð½Ñ‹Ñ… Ð¿Ð¸ÐºÑÐµÐ»ÐµÐ¹, ÑÐ²ÑÐ·Ð½Ð¾ÑÑ‚ÑŒ, Ð´Ð¸Ð°Ð¼ÐµÑ‚Ñ€ Ð½Ð°Ð¸Ð±Ð¾Ð»ÑŒÑˆÐµÐ¹ Ð¾Ð±Ð»Ð°ÑÑ‚Ð¸
#include <stdio.h>
#include <stdlib.h>
#define DEBUG 3 
// #undef DEBUG
#define ISBIT(n,x) (((01<<(n))&(x))?1:0)

void outbyte( char byte)
{          // Ð’Ñ‹Ð²Ð¾Ð´ Ð±Ð°Ð¹Ñ‚Ð° Ð² Ð´Ð²Ð¾Ð¸Ñ‡Ð½Ð¾Ð¼ Ð²Ð¸Ð´Ðµ
  int i;
  for ( i=7; i>-1; i-- )
    putchar(ISBIT((i),byte)?'*':' ');
  fflush(stdout);
}

void outbytes( int n, char *byte)
{          // Ð’Ñ‹Ð²Ð¾Ð´ Ð¼Ð°ÑÑÐ¸Ð²Ð° Ð±Ð°Ð¹Ñ‚Ð¾Ð² Ð² Ð´Ð²Ð¾Ð¸Ñ‡Ð½Ð¾Ð¼ Ð²Ð¸Ð´Ðµ
  int i;
 for (i=0; i<n; i++)
   outbyte(byte[i]);
 putchar('\n');
}



typedef struct img { //  ÑÑ‚Ñ€ÑƒÐºÑ‚ÑƒÑ€Ð° Ð³Ð»Ð¸Ñ„Ð° - ÐºÐ°Ñ€Ñ‚Ð¸Ð½ÐºÐ¸
   int w; int h;  // ÑˆÐ¸Ñ€Ð¸Ð½Ð° Ð¸ Ð²Ñ‹ÑÐ¾Ñ‚Ð° Ð² Ð¿Ð¸ÐºÑÐ»ÐµÐ»ÑÑ…
   int dx;      // Ñ€Ð°ÑÑÑ‚Ð¾ÑÐ½Ð¸Ðµ Ð´Ð¾ ÑÐ»ÐµÐ´ÑƒÑŽÑ‰ÐµÐ³Ð¾ Ð³Ð»Ð¸Ñ„Ð° (ÐµÑÐ»Ð¸ Ð±ÑƒÐºÐ²Ð°)
   int count;   // Ñ‡ÐµÑ€Ð½Ñ‹Ñ… Ð¿Ð¸ÐºÑÐµÐ»ÐµÐ¹ Ð²ÑÐµÐ³Ð¾
   int id;      // Ð¸Ð´Ð½Ñ‚Ð¸Ñ„Ð¸ÐºÐ°Ñ‚Ð¾Ñ€ - "Ð½Ð¾Ð¼ÐµÑ€" Ð³Ð»Ð¸Ñ„Ð°
   int bytes;   // /ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð±Ð°Ð¹Ñ‚Ð¾Ð² Ð² Ð±Ð¸Ñ‚Ð¾Ð²Ð¾Ð¹ ÐºÐ°Ñ€Ñ‚Ðµ
   double density;
   int diam;
   int perim;
   int conn;
   unsigned char *data;  //  Ð±Ð¸Ñ‚Ð¾Ð²Ð°Ñ ÐºÐ°Ñ€Ñ‚Ð° (Ð½ÐµÑƒÐ¿Ð°ÐºÐ¾Ð²Ð°Ð½Ð½Ð°Ñ)
  } IMG;
 
int popcnt8 ( unsigned char i)
{   int count;
     count=0;
     while(i)
     { ++count;
       i=(i-1)&i; }
      return count;
}


IMG *init_img(int id, int w, int h)
{             // ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð¿ÑƒÑÑ‚Ð¾Ð³Ð¾ (Ñ‡Ð¸ÑÑ‚Ð¾Ð³Ð¾) Ð³Ð»Ð¸Ñ„Ð° Ñ Ð·Ð°Ð´Ð°Ð½Ð½Ñ‹Ð¼Ð¸ Ñ€Ð°Ð·Ð¼ÐµÑ€Ð°Ð¼Ð¸
 IMG *t;
 t=(IMG *)malloc(sizeof(IMG)); 
  t->w=w; t->h=h; t->dx=0;
  t->count=0;
  t->id=id;
  t->bytes=(((w+7)/8)*h);
  t->data=(unsigned char *)calloc(t->bytes,1);
 return t;
}



IMG *load_img(int id, char *s)          
{
  FILE *F;          // ÑÑ‡Ð¸Ñ‚Ñ‹Ð²Ð°Ð½Ð¸Ðµ Ð¸Ð· Ñ„Ð°Ð¹Ð»Ð° Ð³Ð»Ð¸Ñ„Ð° Ñ Ð½Ð¾Ð¼ÐµÑ€Ð¾Ð¼ id
   IMG *I;
   I = (IMG *)malloc(sizeof(IMG));
    F = fopen(s,"rb");
  fread(&(I->w),sizeof(int),1,F);
  fread(&(I->h),sizeof(int),1,F);
  fread(&(I->dx),sizeof(int),1,F);
  fread(&(I->count),sizeof(int),1,F);
  fread(&(I->id),sizeof(int),1,F);
  fread(&(I->bytes),sizeof(int),1,F);
   I->data=(unsigned char *)calloc(I->bytes,1);
  fread(I->data,1,I->bytes,F);
  fclose(F);
  return I;
}

int xcomp (IMG **a, IMG **b)
{
   return	-(*a)->w+(*b)->w;
}

int ycomp (IMG **a, IMG **b)
{
   return	-(*a)->h+(*b)->h;
}

 IMG *G[50000];	

 int N;

int ISPIX(int argc, int i, int j)
    {       if (i<0) return 0;
	    if (j<0) return 0;
            if (i>=G[argc]->w) return 0;
                    if (j>=G[argc]->h) return 0;
	 return   ISBIT((7-j%8), G[argc]->data[i*(G[argc]->bytes/G[argc]->h) +j/8 ]);
    }  

int main( int argc, char *argv[])
{       long int c;
	int len;
	unsigned char *s;
	unsigned long long *t;
   N = argc-1;
   while (argc-->1)
      { 
         G[argc]=load_img(argc, argv[argc]);
	 printf("Loaded %s\n",argv[argc]);
     
	 c=0;  
	 t=(unsigned long long *)G[argc]->data;
	 s=(unsigned char *)G[argc]->data;

	 len=G[argc]->bytes;
	 for (int i=0; i<G[argc]->h; i++)
	 {
#ifdef DEBUG
		 printf("%d %d \n",G[argc]->w,G[argc]->h); fflush(stdout);
#endif

    outbytes((G[argc]->w+7)/8, &G[argc]->data[i*(G[argc]->w+7)/8]);
	 }
   for (int i=(len/8)*8; i<len; i++)
   {       c+=popcnt8(s[i]);
#ifdef DEBUG
  printf("COUNT8=%d %d\n",c,i); fflush(stdout);
#endif
   }
     G[argc]->count=c;
     
      }
  printf("%d %d\n",N,c);
}
