#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct point {
    double x;
    double y;
    int num;
} POINT;

int compare(const void *a, const void *b) {
    POINT *p1 = (POINT *)a;
    POINT *p2 = (POINT *)b;
    if (p1->x < p2->x)
        return -1;
    else if (p1->x > p2->x)
        return 1;
    else {
        if (p1->y < p2->y)
            return -1;
        else if (p1->y > p2->y)
            return 1;
        else
            return 0;
    }
}

int orientation(POINT p, POINT q, POINT r) {
    double val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0)
        return 0; 
    else if (val > 0)
        return 1; 
    else
        return 2; 
}

void convex_hull(POINT p[], int n) {
    int i, j, k = 0;
    POINT hull[n];

    
    int l = 0;
    for (i = 1; i < n; i++)
        if (p[i].x < p[l].x)
            l = i;

    
    i = l;
    do {
        hull[k++] = p[i];
        j = (i + 1) % n;
        for (int m = 0; m < n; m++) {
            if (orientation(p[i], p[m], p[j]) == 2)
                j = m;
        }
        i = j;
    } while (i!= l);

    
    FILE *Out = fopen("OUT.dat", "w");
    for (i = 0; i < k; i++)
        fprintf(Out, "%d\n", hull[i].num);
    fclose(Out);
}

int main(int argc, char *argv[]) {
    FILE *In;
    int i, num;
    double x, y;
    POINT p[100000];

    In = fopen("IN.txt", "r");
    i = 0;
    while (fscanf(In, "%d%lf%lf", &num, &x, &y) == 3) {
        p[i].num = num;
        p[i].x = x;
        p[i].y = y;
        i++;
    }
    fclose(In);

    qsort(p, i, sizeof(POINT), compare);
    convex_hull(p, i);

    return 0;
}
 
